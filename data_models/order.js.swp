router.post("/newoder_v2", orderimg.single("orderimg"), async function (
    req,
    res,
    next
) {
    // console.log("Neworder api...............................!!!");
    // console.log(req.body);
    
    const {
        customerId,
        deliveryType,
        weightLimit,
        pkName,
        pkMobileNo,
        pkAddress,
        pkLat,
        pkLong,
        pkCompleteAddress,
        pkContent,
        pkArriveType,
        pkArriveTime,
        dpName,
        dpMobileNo,
        dpAddress,
        dpLat,
        dpLong,
        dpCompleteAddress,
        dpDistance,
        collectCash,
        promoCode,
        amount,
        discount,
        additionalAmount,
        finalAmount,
        schedualDateTime,
    } = req.body;
    
    const file = req.file;
    let num = getOrderNumber();
    try {
        var UserOrders = await orderSchema.find({
            customerId : mongoose.Types.ObjectId(customerId),
        });
        console.log(UserOrders.length);
        
        // let a = Object.keys(UserOrders).map((key) => [Number(key), UserOrders[key]]);
        // console.log("------------------------------------nnnnnnnnnnnnnnnnnnnnnnnnnnn");
        // // console.log(a);
        // console.log(a.length);
        // console.log(UserOrders);
        var promoValidUnderKm = await settingsSchema.find().select("NewUserUnderKm");
        // console.log(promoValidUnderKm);
        console.log(dpDistance);
        if(a.length <=6 && dpDistance <= promoValidUnderKm){
            var promocode = await promoCodeSchema.find({ isForNewUser: true });
            console.log(promocode);
            let discountPercentage = parseFloat(promocode[0].discount);
            var newUserDiscount = 0
            newUserDiscount = (parseFloat(finalAmount) * discountPercentage)/100;
            console.log("Yeahhhhhhhhhhhhhhhhhhh....................................");
            console.log(newUserDiscount);
            var newOrder = new orderSchema({
                _id: new config.mongoose.Types.ObjectId(),
                orderNo: num,
                customerId: customerId,
                deliveryType: deliveryType,
                schedualDateTime: schedualDateTime,
                weightLimit: weightLimit,
                orderImg: file == undefined ? "" : file.path,
                pickupPoint: {
                    name: pkName,
                    mobileNo: pkMobileNo,
                    address: pkAddress,
                    lat: pkLat,
                    long: pkLong,
                    completeAddress: pkCompleteAddress,
                    contents: pkContent,
                    arriveType: pkArriveType,
                    arriveTime: pkArriveTime,
                },
                deliveryPoint: {
                    name: dpName,
                    mobileNo: dpMobileNo,
                    address: dpAddress,
                    lat: dpLat,
                    long: dpLong,
                    completeAddress: dpCompleteAddress,
                    distance: dpDistance,
                },
                collectCash: collectCash,
                promoCode: promoCode,
                amount: amount,
                discount: promocode[0].discount,
                additionalAmount: additionalAmount,
                finalAmount: finalAmount - newUserDiscount,
                status: "Order Processing",
                note: "Your order is processing!",
            }); 
        }else{
            console.log("Noppppppppppppppppppppppppppppppppppppppppppppppp................!!!!");
            newOrder = new orderSchema({
                _id: new config.mongoose.Types.ObjectId(),
                orderNo: num,
                customerId: customerId,
                deliveryType: deliveryType,
                schedualDateTime: schedualDateTime,
                weightLimit: weightLimit,
                orderImg: file == undefined ? "" : file.path,
                pickupPoint: {
                    name: pkName,
                    mobileNo: pkMobileNo,
                    address: pkAddress,
                    lat: pkLat,
                    long: pkLong,
                    completeAddress: pkCompleteAddress,
                    contents: pkContent,
                    arriveType: pkArriveType,
                    arriveTime: pkArriveTime,
                },
                deliveryPoint: {
                    name: dpName,
                    mobileNo: dpMobileNo,
                    address: dpAddress,
                    lat: dpLat,
                    long: dpLong,
                    completeAddress: dpCompleteAddress,
                    distance: dpDistance,
                },
                collectCash: collectCash,
                promoCode: promoCode,
                amount: amount,
                discount: discount,
                additionalAmount: additionalAmount,
                finalAmount: finalAmount,
                status: "Order Processing",
                note: "Your order is processing!",
            });
        }
        
        var placedorder = await newOrder.save();
        var avlcourier = await PNDfinder(
            pkLat,
            pkLong,
            placedorder.id,
            placedorder.deliveryType
        );
        
        if (promoCode != "0") {
            let usedpromo = new usedpromoSchema({
                _id: new config.mongoose.Types.ObjectId(),
                customer: customerId,
                code: promoCode,
            });
            usedpromo.save();
        }
        if (placedorder != null && avlcourier.length != 0) {
            console.log("Total Found:" + avlcourier.length);
            let courierfound = arraySort(avlcourier, "distance");
            var newrequest = new requestSchema({
                _id: new config.mongoose.Types.ObjectId(),
                courierId: courierfound[0].courierId,
                orderId: courierfound[0].orderId,
                distance: courierfound[0].distance,
                status: courierfound[0].status,
                reason: courierfound[0].reason,
                fcmToken: courierfound[0].fcmToken,
            });
            await newrequest.save();

    var AdminMobile = await settingsSchema.find({}).select('AdminMObile1 AdminMObile2 AdminMObile3 AdminMObile4 AdminMObile5 -_id');
    console.log("Admin numbers-------------------------------------------------");
    console.log(AdminMobile);
    var AdminNumber1 = AdminMobile[0].AdminMObile1; 
    var AdminNumber2 = AdminMobile[0].AdminMObile2; 
    var AdminNumber3 = AdminMobile[0].AdminMObile3; 
    var AdminNumber4 = AdminMobile[0].AdminMObile4; 
    var AdminNumber5 = AdminMobile[0].AdminMObile5;
    
    console.log(AdminNumber1);

    var findAdminFcmToken = await customerSchema.find({ mobileNo: AdminNumber1 }).select('fcmToken -_id');
    var findAdminFcmToken2 = await customerSchema.find({ mobileNo: AdminNumber2 }).select('fcmToken -_id');
    var findAdminFcmToken3 = await customerSchema.find({ mobileNo: AdminNumber3 }).select('fcmToken -_id');
    var findAdminFcmToken4 = await customerSchema.find({ mobileNo: AdminNumber4 }).select('fcmToken -_id');
    var findAdminFcmToken5 = await customerSchema.find({ mobileNo: AdminNumber5 }).select('fcmToken -_id');
    
    // console.log(findAdminFcmToken);
    // console.log(findAdminFcmToken2);
    // console.log(findAdminFcmToken3);
    // console.log(findAdminFcmToken4);
    // console.log(findAdminFcmToken5);

    var AdminFcmToken = [findAdminFcmToken[0].fcmToken,findAdminFcmToken2[0].fcmToken,findAdminFcmToken3[0].fcmToken,findAdminFcmToken4[0].fcmToken,findAdminFcmToken5[0].fcmToken];
    console.log("-------------------------ADMINS TOKENS-----------------------------");
    console.log(AdminFcmToken);

    let newOrderData = newOrder.orderNo;
    let newOrderPickUp = newOrder.pickupPoint.address;
    let newOrderDelivery = newOrder.deliveryPoint.address;
    let newOrderCustomerId = newOrder.customerId;
    console.log(newOrderCustomerId);
    let newOrderCustomer = await customerSchema.find({ _id: newOrderCustomerId }).select('name mobileNo -_id');
    
    let newOrderNotification = `New Order Received 
    OrderID: ${newOrderData}
    Customer: ${newOrderCustomer[0].name}
    Mobile: ${newOrderCustomer[0].mobileNo}  
    PickUp: ${newOrderPickUp}`;
    console.log(newOrderNotification);


    var AdminPhoneNumbers = [AdminNumber1,AdminNumber2,AdminNumber3,AdminNumber4,AdminNumber5];
            // var payload2 = {
            //     notification: {
            //         title: "Order Alert",
            //         body: "New Order Alert Found For You.",
            //     },
            //     data: {
            //         sound: "surprise.mp3",
            //         Message: "Hello New Order",
            //         click_action: "FLUTTER_NOTIFICATION_CLICK",
            //     },
            // };
            // var options2 = {
            //     priority: "high",
            //     timeToLive: 60 * 60 * 24,
            // };
            // config.firebase
            //     .messaging()
            //     .sendToDevice(AdminFcmToken, payload2, options2)
            //     .then((doc) => {
            //         console.log("Sending Notification Testing3.......!!!");
            //         console.log(doc);
            //     });
            // config.firebase
            // .messaging()
            // .sendToDevice(AdminFcmToken, payload2, options2)
            // .then((doc) => {                    
            //     console.log("Sending Notification Testing2.......!!!");
            //     console.log(doc);
            // });    
            // orderstatus[0]["isActive"] == true &&
            // orderstatus[0]["status"] == "Order Processing"

            //Send notification to Admin FCM
            
            //Sending FCM Notification to Admin
            console.log(AdminFcmToken.length);
        for(let i=0;i<AdminFcmToken.length;i++){
            console.log(`--------------------------------------- ${i}`);
            console.log(AdminFcmToken[i])
            var dataSendToAdmin = {
                "to":AdminFcmToken[i],
                "priority":"high",
                "content_available":true,
                "data": {
                    "sound": "surprise.mp3",
                    "click_action": "FLUTTER_NOTIFICATION_CLICK"
                },
                "notification":{
                            "body": newOrderNotification,
                            "title":"New Order Received",
                            "badge":1
                        }
            };
    
            var options2 = {
                'method': 'POST',
                'url': 'https://fcm.googleapis.com/fcm/send',
                'headers': {
                    'authorization': 'key=AAAAb8BaOXA:APA91bGPf4oQWUscZcjXnuyIJhEQ_bcb6pifUozs9mjrEyNWJcyut7zudpYLBtXGGDU4uopV8dnIjCOyapZToJ1QxPZVBDBSbhP_wxhriQ7kFBlHN1_HVTRtClUla0XSKGVreSgsbgjH',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dataSendToAdmin)
            };
            request(options2, function (error, response , body) {
                console.log("--------------------Sender--------------------");
                let myJsonBody = JSON.stringify(body);
                //console.log(myJsonBody);
                //myJsonBody[51] USED TO ACCESS RESPONSE DATA SUCCESS FIELD
                console.log(myJsonBody[51]);
                if(myJsonBody[51]==0){
                    console.log("Send Text notification of new order..........!!!");
                    sendMessages(AdminPhoneNumbers[i],newOrderNotification);
                }
                if (error) {
                    console.log(error.message);
                } else {
                    console.log("Sending Notification Testing....!!!");
                    console.log(response.body);
                    if(response.body.success=="1"){
                        console.log("Send Text notification of new order..........!!!");
                        sendMessages(AdminPhoneNumbers[i],newOrderNotification);
                    }
                }
            });
        }

    console.log("After sending notification");
    
    // FCM notification End

            // New Code 03-09-2020
            var payload = {
                "title": "Order Alert",
                "body": "New Order Alert Found For You.",
                "data": {
                    "sound": "surprise.mp3",
                    "orderid": courierfound[0].orderId.toString(),
                    "distance": courierfound[0].distance.toString(),
                    "click_action": "FLUTTER_NOTIFICATION_CLICK"
                },
                "to": courierfound[0].fcmToken
            };
            var options = {
                'method': 'POST',
                'url': 'https://fcm.googleapis.com/fcm/send',
                'headers': {
                    'authorization': 'key=AAAAb8BaOXA:APA91bGPf4oQWUscZcjXnuyIJhEQ_bcb6pifUozs9mjrEyNWJcyut7zudpYLBtXGGDU4uopV8dnIjCOyapZToJ1QxPZVBDBSbhP_wxhriQ7kFBlHN1_HVTRtClUla0XSKGVreSgsbgjH',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            };
            request(options, function (error, response) {
                if (error) {
                    console.log(error.message);
                } else {
                    console.log("Sending Notification");
                    console.log(response.body);
                }
            });

        } else {
            console.log("No Courier Boys Available:: Waiting For Admin Response");
            var updateorder = {
                status: "Admin",
            };
            await orderSchema.findByIdAndUpdate(placedorder.id, updateorder);
        }
        res
            .status(200)
            .json({ Message: "Order Placed!", Data: 1, IsSuccess: true });
    } catch (err) {
        console.log(err);
        res.status(500).json({ Message: err.message, Data: 0, IsSuccess: false });
    }
});